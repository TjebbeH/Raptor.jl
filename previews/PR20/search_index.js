var documenterSearchIndex = {"docs":
[{"location":"timetable/#Timetable","page":"Create Timetable","title":"Timetable","text":"","category":"section"},{"location":"timetable/#Download-GTFS-data.","page":"Create Timetable","title":"Download GTFS data.","text":"","category":"section"},{"location":"timetable/","page":"Create Timetable","title":"Create Timetable","text":"The algorithm needs a TimeTable.  To create such a timetable first download gtfs data of a specific date.  For the dutch public transport this can be done at the ovapi. After unzipping the resulting data should contain at least the following files: ","category":"page"},{"location":"timetable/","page":"Create Timetable","title":"Create Timetable","text":"├── agency.txt\n├── calendar_dates.txt\n├── routes.txt\n├── stop_times.txt\n├── stops.txt\n└── trips.txt","category":"page"},{"location":"timetable/#Create-TimeTable","page":"Create Timetable","title":"Create TimeTable","text":"","category":"section"},{"location":"timetable/","page":"Create Timetable","title":"Create Timetable","text":"Once the gtfs data is saved it is possible to parse it directly into a TimeTable that Raptor can use:","category":"page"},{"location":"timetable/","page":"Create Timetable","title":"Create Timetable","text":"using Raptor\nusing Dates\n\ngtfs_dir = joinpath([@__DIR__, \"..\", \"data\", \"gtfs\", \"gtfs_nl_2024_07_01\"])\ndate = Date(2024,7,1)\ntimetable = create_raptor_timetable(gtfs_dir, date);\nsave_timetable(timetable)","category":"page"},{"location":"timetable/","page":"Create Timetable","title":"Create Timetable","text":"Here gtfs_dir is the path where the gtfs data as structured above can be found.  The function create_raptor_timetable first parses the files into a GtfsTimeTable and subsequently constructs the TimeTable Raptor can use.  The parsing of the stop-times might take a while. After creation it is saved (i.e., serialized at src/raptor_timetable/data/raptor_timetable).","category":"page"},{"location":"timetable/","page":"Create Timetable","title":"Create Timetable","text":"We are now ready to calculate journeys.","category":"page"},{"location":"mcraptor/#McRaptor","page":"Run McRaptor","title":"McRaptor","text":"","category":"section"},{"location":"mcraptor/","page":"Run McRaptor","title":"Run McRaptor","text":"McRaptor is the multi-criteria version of Raptor. Below it is shown how to calculate","category":"page"},{"location":"mcraptor/","page":"Run McRaptor","title":"Run McRaptor","text":"A journey from an origin station to a destination station at a given departure time.\nAll journeys from an origin station to a destination station in a range of departure times.\nAll journeys from every origin to every destination on a given date. ","category":"page"},{"location":"mcraptor/#Load-TimeTable","page":"Run McRaptor","title":"Load TimeTable","text":"","category":"section"},{"location":"mcraptor/","page":"Run McRaptor","title":"Run McRaptor","text":"Assuming we already saved a timetable load the timetable (otherwise follow the steps in Timetable).","category":"page"},{"location":"mcraptor/","page":"Run McRaptor","title":"Run McRaptor","text":"timetable = load_timetable(); ","category":"page"},{"location":"mcraptor/#Journey-options-for-one-specific-departure-time","page":"Run McRaptor","title":"Journey options for one specific departure time","text":"","category":"section"},{"location":"mcraptor/#Create-McRaptorQuery","page":"Run McRaptor","title":"Create McRaptorQuery","text":"","category":"section"},{"location":"mcraptor/","page":"Run McRaptor","title":"Run McRaptor","text":"Let us plan a journey from Vlissingen to Groningen at 13h on 2024-07-01. We first create a query as below.","category":"page"},{"location":"mcraptor/","page":"Run McRaptor","title":"Run McRaptor","text":"date = Date(2024,7,1)\norigin = \"Vlissingen\"\ndestination = \"Groningen\"\ndeparture_time = date + Time(13);\n\nquery = McRaptorQuery(origin, departure_time, timetable);","category":"page"},{"location":"mcraptor/","page":"Run McRaptor","title":"Run McRaptor","text":"Note that the destination is not an argument of the constructor McRaptorQuery.  The reason is that Raptor calculates journeys to all destinations at onces.  So, later we will select the journeys arriving at Groningen.","category":"page"},{"location":"mcraptor/#Run-McRaptor-and-reconstruct-the-journeys","page":"Run McRaptor","title":"Run McRaptor and reconstruct the journeys","text":"","category":"section"},{"location":"mcraptor/","page":"Run McRaptor","title":"Run McRaptor","text":"To calculate the journey options we run the following code.","category":"page"},{"location":"mcraptor/","page":"Run McRaptor","title":"Run McRaptor","text":"bag_round_stop, last_round = run_mc_raptor(timetable, query);\njourneys = reconstruct_journeys_to_all_destinations(\n    query.origin, timetable, bag_round_stop, last_round\n);\n\ndestination_station = try_to_get_station(destination, timetable)\nprintln(journeys[destination_station])","category":"page"},{"location":"mcraptor/","page":"Run McRaptor","title":"Run McRaptor","text":"The first line is runs the round based algorithm and returns the resulting so called round bags. The second line reconstructs journeys from these round bags. The resulting object journeys is a dictionary with destination Stations as keys and the Journeys as values.  The second to last lines looks for a station with the name 'Groningen' in the timetable.  The last line prints the journeys to the destination station Groningen.","category":"page"},{"location":"mcraptor/#Journey-options-for-a-range-of-departure-times","page":"Run McRaptor","title":"Journey options for a range of departure times","text":"","category":"section"},{"location":"mcraptor/","page":"Run McRaptor","title":"Run McRaptor","text":"Let us now calculate all journey options from Vlissingen to Groningen between 9h and 15h on 2024-07-01. This works almost the same as above, only now we create a RangeMcRaptorQuery. ","category":"page"},{"location":"mcraptor/","page":"Run McRaptor","title":"Run McRaptor","text":"timetable = load_timetable();\n\ndate = Date(2024,7,1)\norigin = \"Vlissingen\"\ndestination = \"Groningen\"\ndeparture_time_min = date + Time(9);\ndeparture_time_max = date + Time(15);\n\nrange_query = RangeMcRaptorQuery(origin, departure_time_min, departure_time_max, timetable);\njourneys = run_mc_raptor_and_construct_journeys(timetable, range_query);\n\ndestination_station = try_to_get_station(destination, timetable)\nprintln(journeys[destination_station])","category":"page"},{"location":"mcraptor/#Calculate-all-journey-options-at-a-given-date.","page":"Run McRaptor","title":"Calculate all journey options at a given date.","text":"","category":"section"},{"location":"mcraptor/","page":"Run McRaptor","title":"Run McRaptor","text":"Let us calculate all (non dominated) journey options between any two stations on 2024-07-01. We can fix the maximum number of transfers passengers take.  This sets a bound on the number of rounds the algorithm. Below we assume passengers do not take journeys with more than 5 transfers. We use 8 parallel processes for the calculation.","category":"page"},{"location":"mcraptor/","page":"Run McRaptor","title":"Run McRaptor","text":"using Distributed\naddprocs(8)\n\n@everywhere using Raptor\nusing Dates\n\ndate = Date(2024,7,1)\ntimetable = load_timetable();\nmaximum_transfers = 5\n\njourneys = calculate_all_journeys(timetable, date, maximum_transfers);","category":"page"},{"location":"toy_example/#Toy-example","page":"Toy example","title":"Toy example","text":"","category":"section"},{"location":"toy_example/","page":"Toy example","title":"Toy example","text":"Toy example from tests. We wish to travel from station S2 to S4 at 13:15 on 2024-10-21.  The first figure shows the network and the second the timetable.","category":"page"},{"location":"toy_example/","page":"Toy example","title":"Toy example","text":"(Image: Toy_example)","category":"page"},{"location":"toy_example/","page":"Toy example","title":"Toy example","text":"Schematic of the rail network as toy example. The colored ellipses denote stations (S1, ..., S8) and the gray circles with numbers denote platforms in the stations.  A line connecting to platforms denotes that a train is scheduled to drive from one platform to the other.  The name of the route (R1, ..., R4) is written next to the line connecting two platforms.  The euro sign € denotes that for a trip between S8 and S4 an extra fare is needed.  The thin lines between platforms denote footpaths.","category":"page"},{"location":"toy_example/","page":"Toy example","title":"Toy example","text":"(Image: Toy_example)","category":"page"},{"location":"toy_example/","page":"Toy example","title":"Toy example","text":"Timetable of toy example. The horizontal axes denotes time, the vertical one the stations. The different colors are the different trips.","category":"page"},{"location":"toy_example/","page":"Toy example","title":"Toy example","text":"# Load package\nusing Raptor\nusing Dates\n\n# Create timetable for toy example\ninclude(\"../../test/create_test_timetable.jl\")\ntimetable = create_test_timetable();\ntoday = Date(2021, 10, 21)\n\n# Create the query\norigin = \"S2\"\ndeparture_time = today + Time(13, 15)\nquery = McRaptorQuery(origin, departure_time, timetable)\n\n# Calculate all journey options departing from S2 at 13:15\nbag_round_stop, last_round = run_mc_raptor(timetable, query);\njourneys = reconstruct_journeys_to_all_destinations(\n    query.origin, timetable, bag_round_stop, last_round\n);\n\n# Print the journey options to S4\ndestination = timetable.stations[\"S4\"];\nprint(journeys[destination])","category":"page"},{"location":"toy_example/","page":"Toy example","title":"Toy example","text":"We see there are three non dominated options:","category":"page"},{"location":"toy_example/","page":"Toy example","title":"Toy example","text":"A direct very fast one that costs extra.\nA direct one and free of extra charge but slow.\nA moderately fast one, free of extra charge, but with a transfer.","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Raptor is an algorithm that, given a (dynamic) public transport timetable, calculates journey options. That is, when you wishes to travel by train from one station to an other station at a given departure time,  the algorithm yields a set of relevant options that you can take.  Here, relevant means Pareto-optimal journeys for multiple criteria, such as arrival time, number of transfers and costs. For example, when there is a direct option (i.e., with no transfers) and an option with one transfer which arrives before the direct one, it will yield both options.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The algorithm is a Round-Based Public Transit Routing algorithm described in Delling et al. (2014).  The implementation is based on pyraptor.","category":"page"}]
}
